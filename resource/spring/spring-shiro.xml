<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <description>apache shiro配置</description>


    <!-- 1、配置securityManager安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="shiroRealm"/>
    </bean>

    <!-- 2、配置缓存管理器（cacheManager） 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:/ehcache/ehcache-shiro.xml"/>
    </bean>

    <!-- 3、配置Realm：直接配置实现了 org.apache.shiro.realm.Realm 接口的bean -->
    <bean id="shiroRealm" class="com.sckj.shiro.realms.ShiroRealm">
        <!--配置认证匹配器,将登录输入的密码进行 MD5 加密-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
            </bean>
        </property>
    </bean>

    <!-- 4、配置Shiro生命周期处理器:可以自动的来调用配置在Spring IOC容器中 shiro bean 的生命周期方法-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 5、启用IOC容器中使用shiro注解，但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 6、配置ShiroFilter: id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的<filter-name>一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--登录页面-->
        <property name="loginUrl" value="/login.jsp"/>
        <!--登录成功页面-->
        <property name="successUrl" value="/index"/>
        <!--没有权限的页面-->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!--
            配置哪些页面需要受保护
            以及访问这些页面需要的权限
            1）. anon  可以被匿名访问
            2）. authc 必须认证（即登录）后才可能访问的页面
            3）. logout
         -->
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /favicon.ico = anon
                /login/login = anon
                /logout = logout

                <!--配置静态资源不被拦截-->
                /static/** = anon

                /** = authc
            </value>
        </property>
    </bean>

</beans>